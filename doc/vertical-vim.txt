*vertical-vim.txt*	Vertical motions for the Vim text editor
*vertical-vim*

 __   __       _   _         _  __   ___        ~
 \ \ / /__ _ _| |_(_)__ __ _| | \ \ / (_)_ __   ~
  \ V / -_) '_|  _| / _/ _` | |  \ V /| | '  \  ~
   \_/\___|_|  \__|_\__\__,_|_|   \_/ |_|_|_|_| ~

Author:   Zachary Krepelka
Date:     Friday, February 23rd, 2024

Origin: https://github.com/zachary-krepelka/vertical-vim.git

================================================================================

TABLE OF CONTENTS 0                                 *vertical-vim-contents* {{{1

 1. Introduction   ...........................   |vertical-vim-intro|
 2. Usage   ..................................   |vertical-vim-usage|
 3. Example   ................................   |vertical-vim-examples|
 4. Exercise   ...............................   |vertical-vim-exercise|
 5. Solution   ...............................   |vertical-vim-solution|
 6. Tips   ...................................   |vertical-vim-tips|
 7. Bugs   ...................................   |vertical-vim-bugs|
 8. Customization   ..........................   |vertical-vim-customization|
 9. Acknowledgements   .......................   |vertical-vim-acknowledgements|
10. Related   ................................   |vertical-vim-related|

================================================================================

INTRODUCTION      1                                    *vertical-vim-intro* {{{1

1.1 OVERVIEW {{{2~

This plugin provides vertical counterparts to builtin |movement|s, currently
|f|, |F|, |t|, |T|, |;|, and |,|.  They enable users to move their cursors
vertically along the cursor's current column as apposed to horizontally along
the cursor's current line.

1.2 BACKGROUND {{{2~

The Vim text editor provides a set of commands called motions or |movement|s, so
called because they move the cursor's position on the screen.  An |operator|
applies an action to the text moved over by a motion.  Either may be given a
|count| to enact their functionality a specified number of times.

A subset of these motions pertain to moving the cursor either left or right
within the current line.  Of these, I am specifically interested in the
following.  |f| |F| |t| |T| |;| |,|

	- The |f|ind command takes a character and moves the cursor to the next
	  occurrence of that character in the current line.  Its counterpart |F|
	  takes a character and moves the cursor to the previous occurrence of
	  that character in the current line. >

                before  fR
                |
                #
                Quoth the Raven "Nevermore."
                          #
                          |
                          after  fR
<

	- The |t|ill command takes a character and moves the cursor just before
	  the next occurrence of that character in the current line.  Its
	  counterpart |T| takes a character and moves the cursor just after the
	  previous occurrence of that character in the current line. >

		before  tR
		|
		#
		Quoth the Raven "Nevermore."
		         #
			 |
			 after  tR
<

	- The command |;| repeats latest |f|, |t|, |F| or |T|.  Its counterpart
	  command |,| applies |;| in the opposite direction. >

		  start here                   fw
		  |                            |
		  #                            #
		  Once upon a midnight dreary, while I pondered, weak and weary,
		  						 #        #
		  						 |        |
		  						 ;        ;
<
	These commands let you flow through a line with ease once you have
	established a target.  They feel quite natural once you get into the
	habit of using them.  Observe that |;| and |,| have a direction of flow
	dependent upon the last issued |f|, |t|, |F|, or |T|.

1.3 PLUGIN FUNCTIONALITY {{{2~

This plugin provides a variation of the commands previously discussed.  By
prefixing any of the aforementioned motions with a space, the motion will take
effect in the current column as apposed to the current line.  In effect, this
plugin provides vertical counterparts to |f|, |F|, |t|, |T|, |;|, and |,|.

Maybe down the road, should the need arise, I'll program more vertical motions.
In the future, I would like to implement vertical counterparts to other motions
like the |word-motions| and the |left-right-motions|.

}}}

================================================================================

USAGE             2                                    *vertical-vim-usage* {{{1

This plugin provides six motions.  Operators and counts work as expected.

								*vertical-vim-f*
<Space>f{char}

			A blockwise motion that moves the cursor to the next
			occurrence of {char} in the cursor's current column.
			The cursor will move down the screen should a match
			exist.

								*vertical-vim-F*
<Space>F{char}

			A blockwise motion that moves the cursor to the previous
			occurrence of {char} in the cursor's current column.
			The cursor will move up the screen should a match exist.

								*vertical-vim-t*
<Space>t{char}

			A blockwise motion that moves the cursor just before the
			next occurrence of {char} in the cursor's current
			column.  The cursor will move down the screen should a
			match exist.

								*vertical-vim-T*
<Space>T{char}

			A blockwise motion that moves the cursor just after the
			previous occurrence of {char} in the cursor's current
			column.  The cursor will move up the screen should a
			match exist.

								*vertical-vim-;*
<Space>;

			Apply the latest of the four commands from above.

								*vertical-vim-,*
<Space>,

			Apply the above command in the reverse direction.

================================================================================

EXAMPLES          3                                 *vertical-vim-examples* {{{1

The following exercises will give you a good feel for this plugin.  Below is an
ASCII art representation of a chess board.  I will use this to demonstrate my
plugin's functionality.  You may want to copy it into a new buffer to practice
with.  1) Place your cursor on the image and copy it with `yip`.  2) Open up a
new window with |:vnew|.  3) Paste the image with |p|. >

	   _______________
	8 |_|#|_|#|_|#|_|#|
	7 |#|_|#|_|#|_|#|_|
	6 |_|#|_|#|_|#|_|#|
	5 |#|_|#|_|#|_|#|_|
	4 |_|#|_|#|_|#|_|#|
	3 |#|_|#|_|#|_|#|_|
	2 |_|#|_|#|_|#|_|#|
	1 |#|_|#|_|#|_|#|_|
	   a b c d e f g h

3.1 BASIC MOVEMENT {{{2~

Move your cursor to cell A8.  Place a mark for convenience.

	* In vanilla Vim, you would type `f#` in normal mode to move to cell B8.

	* Instead, type `<Space>f#` in normal mode to move to cell A7.

Now move your cursor to cell H1.

	* In vanilla Vim, you would type `F#` to move to cell G1.

	* Instead, type `<Space>F#` to move to cell H2.

The `<Space>t` and `<Space>T` commands are similar.

3.2 REPEATING MOVEMENTS {{{2~

Return to cell A8 and type `f#`.

	* Repeated application of `;` will move you
	  across the board from left to right.

	* Repeated application of `,` will move you
	  across the board from right to left.

Return to cell A8 and type `<Space>f#`.

	* Repeated application of `<Space>;` will move you down the board.

	* Repeated application of `<Space>,` will move you up the board.

3.3 APPLYING COUNTS {{{2~

Return to cell A8.

	* In vanilla Vim, you would type `4f#` to move to cell H8.

	* Instead, type `4<Space>f#` to move to cell A1.

Counts also work with `<Space>;` and `<Space>,`.

3.4 USING OPERATORS {{{2~

All of the standard operators should work.  Return to cell A8 and try the
following examples with different counts.  Undo is your friend.

	* `y<Space>f{char}` to yank vertically.

	* `c<Space>f{char}changed<Esc>` to change vertically.

	* `d<Space>f{char}` to delete vertically.

	* `v<Space>f{char}` to visually select vertically.

}}}

================================================================================

EXERCISE          4                                 *vertical-vim-exercise* {{{1

Your challenge is to complete the box around the heart in the fewest keystrokes
possible.  Your cursor begins in the upper left-hand corner of the box (on the
plus sign).  Notice that there is no trailing whitespace after the heart.  Since
Vim |help| files are displayed in read-only mode, go ahead and `y`ank `i`nside
the following `p`aragraph so you can `p`ut it into a |:new| buffer where changes
can be made.  Try to figure it out yourself.  Check your answer in the next
section. >

                     +-----------------------------------
                     |
                     |        ......       ......
                     |      ..........   ..........
                     |    ............. .............
                     |   .............................
                     |   .............................
                     |   .............................
                     |    ...........................
                     |      .......................
                     |        ...................
                     |           ...............
                     |            ...........
                     |              .......
                     |                ...
                     |                 .
                     |
                     +-----------------------------------

Bonus: delete the left-hand side of the square.

================================================================================

SOLUTION          5                                 *vertical-vim-solution* {{{1

5.1 USING THIS PLUGIN {{{2~

With your cursor on the upper left-hand corner of the box, type the following. >

	y<Space>f+$p

Here's how it works.

1. With our cursor on the plus sign in the upper left-hand corner, we type
   `y<Space>f+` to vertically yank up to and including the next plus sign in the
   current cursor column.  The 'y' is an operator and '<Space>f+' is its motion.
   The left-hand side of the square is now stored in the unnamed register as a
   visual block.

2. The cursor does not move after performing step one.  With our cursor in the
   same position as before, we type the '$' motion to move to the upper
   right-hand corner of the square.

3. Once our cursor is in the upper right-hand corner of the square, we use the
   |p| operator to put the side of the square yanked in step one.

5.2 USING VANILLA VIM {{{2~

A plugin isn't always the solution.  Minimalists often insist that it is
possible do to "90% of what plugins do with just Vim."  If I am to give a fair
assessment, then I must also show a Vim-only solution.  Both solutions entail
the same number of keystrokes.  The reader can decide which one feels more
intuitive. >

	*y<C-V>N$p

1. With our cursor on the plus sign in the upper left-hand corner of the square,
   we move to the lower left-hand corner by typing `*`.  The |star| operator
   moves the cursor to the next occurrence of the word under the cursor.  In
   this circumstance, it actually grabs the whole inner line, but that will not
   matter for us.  Not only have we moved the cursor, but we have also modified
   the |last-pattern|.  This establishes a target for the |N| operator which
   will be used in a later step.

2. With our cursor on the lower left-hand corner of the square, we type
   `y<C-V>N`.  Here |y| is an |operator| and `<C-V>N` is a |forced-motion|.  By
   default, the |N| motion is |characterwise|, but here we force it to be
   blockwise.  This operator-motion combo enacts two effects.

     a. The cursor moves to the previous occurrence of |last-pattern|, which for
        us is our original cursor position -- the upper left-hand corner of the
        square.

     b. The text moved over by the blockwise motion `<C-V>N` is stored in the
        unnamed register as a |visual-block|.  In effect, we have vertically
        yanked back to and including the previous plus sign, capturing the
        left-hand side of the square.  It would not have worked had we only used
        |N| by itself because the motion would have moved over the whole heart,
        not just the edge of the box.

3. Typing `$p` performs the same function as noted before.

Some variations of this solution are listed below. >

	y<C-V>17j$p
	<C-V>jjjjjjjjjjjjjjjjjy$p
	/+<Enter><C-V>Ny$p
	k/+<Enter><C-V>ny$p

Some flaws with these are

  * assumption of no intermediate matches
  * requires counting or repeatedly pressing buttons
  * unnecessary visuals / verbosity of forced motions
  * etc

}}}

================================================================================

TIPS              6                                     *vertical-vim-tips* {{{1

This plugin works nice with this in your |vimrc|. >

	set cursorline
	set cursorcolumn

This creates a crosshair centered on your cursor.  The 'cursorcolumn' is of
particular relevance because it helps the user identify targets for the motions
provided by this plugin.  To make it follow your cursor around as you jump
between windows, you can do something like this. >

	augroup Focus

		" These commands are issued when the active window changes.

		autocmd!

		autocmd WinEnter * set cul
		autocmd WinLeave * set nocuc

		autocmd WinEnter * set cuc
		autocmd WinLeave * set nocul

	augroup END

================================================================================

BUGS              7                                     *vertical-vim-bugs* {{{1

1. Forced motions do not work.  Here is an example. >

	+-------+
	|       |
	|   t   |
	|       |
	+-------+
<
   With my cursor on the upper left-hand corner, I expect `yV<Space>f+` to yank
   the entire box in a linewise manner.  In reality, the forced motion is
   ignored and only the left-hand side of the square is yanked in a blockwise
   manner. I would like to fix this if I can.  For the time being however, we
   can accomplish the desired functionality indirectly.

   a. To use vertical motions linewise, do this.

	`v{vertical-motion}V<Operator>`

	Example: `v<Space>f+Vy` yanks the entire box

	Useful in situations when `yip`, `y}`, etc are ineffective.

   b. To use vertical motions chacterwise, do this.

        `v{vertical-motion}v<Operator>`

	Example: `v2<Space>f|vfto0y`

	This yanks the first half of the box including the target `t`.

2. Problems can occur if a vertical motion is used when there is already other
   text highlighted in |visual-mode|.

================================================================================

CUSTOMIZATION     8                            *vertical-vim-customization* {{{1

Customization is achieved by setting variables in your |.vimrc| file.

*g:vertical_meta_motion*	(default: <Space>%s)

	Specifies the abstract form of a vertical motion.  The variable must
	contain the substring `%s`.  This represents a generic, particular
	built-in motion.

	The motions provided by this plugin verbatimly parallel a subset of
	Vim's built-in motions, and this is achieved by using a common prefix on
	those built-in motions to reserve a separate namespace.  Users can
	choose their own preferred prefix by altering this variable.

	For example, to use the alt key, you can do this. >

		let g:vertical_meta_motion = '<M-%s>'

================================================================================

ACKNOWLEDGEMENTS  9                         *vertical-vim-acknowledgements* {{{1

The ASCII art banner at the beginning of this file was generated with FIGlet.

	https://en.wikipedia.org/wiki/FIGlet

The chess board is courtesy of the ASCII Art Archive, copy-and-pasted from here.

	https://www.asciiart.eu/sports-and-outdoors/chess.

The ability to change the map prefix was suggested in a blog post by Steve Losh.

	https://stevelosh.com/blog/2011/09/writing-vim-plugins/#s9-let-me-configure-mappings

================================================================================

RELATED           10                                 *vertical-vim-related* {{{1

9.1 REINVENTING THE WHEEL {{{2~

I reinvented the wheel without even realizing!  It was worth it though because I
had a heck of a lot of fun programming this plugin and documenting it.

I found some nearly identical Vim plugins on the internet.  I was not aware of
these when writing my plugin and only discovered them after the fact.  Some do a
much better job than I did.  My plugin is modest and probably full of bugs.

  * https://github.com/inkarkat/vim-JumpToVerticalOccurrence
  * https://github.com/machakann/vim-columnmove
  * https://github.com/rbong/vim-vertical
  * https://github.com/romgrk/columnMove.vim
  * https://github.com/vim-utils/vim-vertical-move

After personally trying out each of these, I have come to the opinion that
`vim-columnmove` by GitHub user "machakann" is the best one.  It does exactly
what this plugin does, but it does a much better job and offers more
functionality.  You should install machakann's plugin instead of mine!

One is written by the legendary Igno Karkat, a Vim veteran whose name I often
encounter during my journeys to https://vi.stackexchange.com.

9.2 A BETTER WAY TO MOVE VERTICALLY IN VIM {{{2~

One of my most beloved Vim plugins is `vertigo.vim` by GitHub user
"prendradjaja."  It provides motions for moving up and down via `k` and `j`
using home row keypresses instead of numbers to specify the magnitude of the
movement.  Any touch typist will understand the appeal of staying on the home
row.  I love this plugin so much that I ported it to ranger, a command-line file
manager with a text-based user interface and Vim-inspired keybindings.  Someone
else wrote an Emacs port too.

  * `vertigo.vim`: https://github.com/prendradjaja/vim-vertigo
  * `vertigo.el`: https://github.com/noctuid/vertigo.el
  * `plugin_vertigo.py`: https://github.com/zachary-krepelka/ranger-vertigo

================================================================================
UPDATED: Saturday, March 1st, 2025 at 1:30 AM
vim:tw=80:ts=8:ft=help:fdm=marker
